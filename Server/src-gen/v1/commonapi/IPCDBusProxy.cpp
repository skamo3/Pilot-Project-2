/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201907221221.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/commonapi/IPCDBusProxy.hpp>

namespace v1 {
namespace commonapi {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createIPCDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
    return std::make_shared< IPCDBusProxy>(_address, _connection);
}

void initializeIPCDBusProxy() {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
        IPC::getInterface(),
        &createIPCDBusProxy);
}

INITIALIZER(registerIPCDBusProxy) {
    CommonAPI::DBus::Factory::get()->registerInterface(initializeIPCDBusProxy);
}

IPCDBusProxy::IPCDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
    :   CommonAPI::DBus::DBusProxy(_address, _connection)
{
}



    void IPCDBusProxy::canDataMethod(const IPC::CanData &_frame, CommonAPI::CallStatus &_internalCallStatus, IPC::CanData &_canFrame, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< IPC::CanData, ::v1::commonapi::IPC_::CanDataDeployment_t> deploy_frame(_frame, static_cast< ::v1::commonapi::IPC_::CanDataDeployment_t* >(nullptr));
        CommonAPI::Deployable< IPC::CanData, ::v1::commonapi::IPC_::CanDataDeployment_t> deploy_canFrame(static_cast< ::v1::commonapi::IPC_::CanDataDeployment_t* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< IPC::CanData, ::v1::commonapi::IPC_::CanDataDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< IPC::CanData,::v1::commonapi::IPC_::CanDataDeployment_t>
            >
            >::callMethodWithReply(
        *this,
        "canDataMethod",
        "(iiii)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_frame,
_internalCallStatus,
deploy_canFrame);
_canFrame = deploy_canFrame.getValue();
}
    std::future<CommonAPI::CallStatus> IPCDBusProxy::canDataMethodAsync(const IPC::CanData &_frame, CanDataMethodAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< IPC::CanData, ::v1::commonapi::IPC_::CanDataDeployment_t> deploy_frame(_frame, static_cast< ::v1::commonapi::IPC_::CanDataDeployment_t* >(nullptr));
        CommonAPI::Deployable< IPC::CanData, ::v1::commonapi::IPC_::CanDataDeployment_t> deploy_canFrame(static_cast< ::v1::commonapi::IPC_::CanDataDeployment_t* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< IPC::CanData, ::v1::commonapi::IPC_::CanDataDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< IPC::CanData,::v1::commonapi::IPC_::CanDataDeployment_t>
            >
            >::callMethodAsync(
        *this,
        "canDataMethod",
        "(iiii)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_frame,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< IPC::CanData, ::v1::commonapi::IPC_::CanDataDeployment_t > _canFrame) {
            if (_callback)
                _callback(_internalCallStatus, _canFrame.getValue());
        },
        std::make_tuple(deploy_canFrame));
    }


void IPCDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace commonapi
      } // namespace v1
