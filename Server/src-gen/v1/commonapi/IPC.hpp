/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_IPC_HPP_
#define V1_COMMONAPI_IPC_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace commonapi {

class IPC {
public:
    virtual ~IPC() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    struct CanData : CommonAPI::Struct< int32_t, int32_t, int32_t, int32_t> {
    
        CanData()
        {
            std::get< 0>(values_) = 0;
            std::get< 1>(values_) = 0;
            std::get< 2>(values_) = 0;
            std::get< 3>(values_) = 0;
        }
        CanData(const int32_t &_rpm, const int32_t &_temperature, const int32_t &_humadity, const int32_t &_battery)
        {
            std::get< 0>(values_) = _rpm;
            std::get< 1>(values_) = _temperature;
            std::get< 2>(values_) = _humadity;
            std::get< 3>(values_) = _battery;
        }
        inline const int32_t &getRpm() const { return std::get< 0>(values_); }
        inline void setRpm(const int32_t &_value) { std::get< 0>(values_) = _value; }
        inline const int32_t &getTemperature() const { return std::get< 1>(values_); }
        inline void setTemperature(const int32_t &_value) { std::get< 1>(values_) = _value; }
        inline const int32_t &getHumadity() const { return std::get< 2>(values_); }
        inline void setHumadity(const int32_t &_value) { std::get< 2>(values_) = _value; }
        inline const int32_t &getBattery() const { return std::get< 3>(values_); }
        inline void setBattery(const int32_t &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const CanData& _other) const {
        return (getRpm() == _other.getRpm() && getTemperature() == _other.getTemperature() && getHumadity() == _other.getHumadity() && getBattery() == _other.getBattery());
        }
        inline bool operator!=(const CanData &_other) const {
            return !((*this) == _other);
        }
    
    };
};

const char* IPC::getInterface() {
    return ("commonapi.IPC:v1_0");
}

CommonAPI::Version IPC::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace commonapi
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_IPC_HPP_
