/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201907221221.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/commonapi/HelloWorldDBusProxy.hpp>

namespace v1 {
namespace commonapi {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createHelloWorldDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
    return std::make_shared< HelloWorldDBusProxy>(_address, _connection);
}

void initializeHelloWorldDBusProxy() {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
        HelloWorld::getInterface(),
        &createHelloWorldDBusProxy);
}

INITIALIZER(registerHelloWorldDBusProxy) {
    CommonAPI::DBus::Factory::get()->registerInterface(initializeHelloWorldDBusProxy);
}

HelloWorldDBusProxy::HelloWorldDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
    :   CommonAPI::DBus::DBusProxy(_address, _connection)
{
}



    void HelloWorldDBusProxy::sayHello(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_message, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_message(static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< std::string,CommonAPI::DBus::StringDeployment>
            >
            >::callMethodWithReply(
        *this,
        "sayHello",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_name,
_internalCallStatus,
deploy_message);
_message = deploy_message.getValue();
}
    std::future<CommonAPI::CallStatus> HelloWorldDBusProxy::sayHelloAsync(const std::string &_name, SayHelloAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_message(static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< std::string,CommonAPI::DBus::StringDeployment>
            >
            >::callMethodAsync(
        *this,
        "sayHello",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_name,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment > _message) {
            if (_callback)
                _callback(_internalCallStatus, _message.getValue());
        },
        std::make_tuple(deploy_message));
    }
    void HelloWorldDBusProxy::intDataMethod(const int32_t &_parameter, CommonAPI::CallStatus &_internalCallStatus, int32_t &_output, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_parameter(_parameter, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_output(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodWithReply(
        *this,
        "intDataMethod",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_parameter,
_internalCallStatus,
deploy_output);
_output = deploy_output.getValue();
}
    std::future<CommonAPI::CallStatus> HelloWorldDBusProxy::intDataMethodAsync(const int32_t &_parameter, IntDataMethodAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_parameter(_parameter, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_output(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodAsync(
        *this,
        "intDataMethod",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_parameter,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment > _output) {
            if (_callback)
                _callback(_internalCallStatus, _output.getValue());
        },
        std::make_tuple(deploy_output));
    }
    void HelloWorldDBusProxy::enumMethod(const HelloWorld::testEnum &_testEnumParameter, CommonAPI::CallStatus &_internalCallStatus, int32_t &_output, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< HelloWorld::testEnum, CommonAPI::EmptyDeployment> deploy_testEnumParameter(_testEnumParameter, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_output(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< HelloWorld::testEnum, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodWithReply(
        *this,
        "enumMethod",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_testEnumParameter,
_internalCallStatus,
deploy_output);
_output = deploy_output.getValue();
}
    std::future<CommonAPI::CallStatus> HelloWorldDBusProxy::enumMethodAsync(const HelloWorld::testEnum &_testEnumParameter, EnumMethodAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< HelloWorld::testEnum, CommonAPI::EmptyDeployment> deploy_testEnumParameter(_testEnumParameter, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_output(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< HelloWorld::testEnum, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodAsync(
        *this,
        "enumMethod",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_testEnumParameter,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment > _output) {
            if (_callback)
                _callback(_internalCallStatus, _output.getValue());
        },
        std::make_tuple(deploy_output));
    }
    void HelloWorldDBusProxy::structInMethod(const HelloWorld::testStruct &_structParameter, CommonAPI::CallStatus &_internalCallStatus, int32_t &_output, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< HelloWorld::testStruct, ::v1::commonapi::HelloWorld_::testStructDeployment_t> deploy_structParameter(_structParameter, static_cast< ::v1::commonapi::HelloWorld_::testStructDeployment_t* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_output(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< HelloWorld::testStruct, ::v1::commonapi::HelloWorld_::testStructDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodWithReply(
        *this,
        "structInMethod",
        "(isisisisis)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_structParameter,
_internalCallStatus,
deploy_output);
_output = deploy_output.getValue();
}
    std::future<CommonAPI::CallStatus> HelloWorldDBusProxy::structInMethodAsync(const HelloWorld::testStruct &_structParameter, StructInMethodAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< HelloWorld::testStruct, ::v1::commonapi::HelloWorld_::testStructDeployment_t> deploy_structParameter(_structParameter, static_cast< ::v1::commonapi::HelloWorld_::testStructDeployment_t* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_output(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< HelloWorld::testStruct, ::v1::commonapi::HelloWorld_::testStructDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodAsync(
        *this,
        "structInMethod",
        "(isisisisis)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_structParameter,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment > _output) {
            if (_callback)
                _callback(_internalCallStatus, _output.getValue());
        },
        std::make_tuple(deploy_output));
    }
    void HelloWorldDBusProxy::structOutMethod(const int32_t &_input, CommonAPI::CallStatus &_internalCallStatus, HelloWorld::testStruct &_structParameter, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_input(_input, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< HelloWorld::testStruct, ::v1::commonapi::HelloWorld_::testStructDeployment_t> deploy_structParameter(static_cast< ::v1::commonapi::HelloWorld_::testStructDeployment_t* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< HelloWorld::testStruct,::v1::commonapi::HelloWorld_::testStructDeployment_t>
            >
            >::callMethodWithReply(
        *this,
        "structOutMethod",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_input,
_internalCallStatus,
deploy_structParameter);
_structParameter = deploy_structParameter.getValue();
}
    std::future<CommonAPI::CallStatus> HelloWorldDBusProxy::structOutMethodAsync(const int32_t &_input, StructOutMethodAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_input(_input, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< HelloWorld::testStruct, ::v1::commonapi::HelloWorld_::testStructDeployment_t> deploy_structParameter(static_cast< ::v1::commonapi::HelloWorld_::testStructDeployment_t* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< HelloWorld::testStruct,::v1::commonapi::HelloWorld_::testStructDeployment_t>
            >
            >::callMethodAsync(
        *this,
        "structOutMethod",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_input,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< HelloWorld::testStruct, ::v1::commonapi::HelloWorld_::testStructDeployment_t > _structParameter) {
            if (_callback)
                _callback(_internalCallStatus, _structParameter.getValue());
        },
        std::make_tuple(deploy_structParameter));
    }


void HelloWorldDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace commonapi
      } // namespace v1
