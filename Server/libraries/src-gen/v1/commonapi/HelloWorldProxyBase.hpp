/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_Hello_World_PROXY_BASE_HPP_
#define V1_COMMONAPI_Hello_World_PROXY_BASE_HPP_

#include <v1/commonapi/HelloWorld.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace commonapi {

class HelloWorldProxyBase
    : virtual public CommonAPI::Proxy {
public:

    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> SayHelloAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> IntDataMethodAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> EnumMethodAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> StructInMethodAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const HelloWorld::testStruct&)> StructOutMethodAsyncCallback;



    virtual void sayHello(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_message, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> sayHelloAsync(const std::string &_name, SayHelloAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void intDataMethod(const int32_t &_parameter, CommonAPI::CallStatus &_internalCallStatus, int32_t &_output, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> intDataMethodAsync(const int32_t &_parameter, IntDataMethodAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void enumMethod(const HelloWorld::testEnum &_testEnumParameter, CommonAPI::CallStatus &_internalCallStatus, int32_t &_output, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> enumMethodAsync(const HelloWorld::testEnum &_testEnumParameter, EnumMethodAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void structInMethod(const HelloWorld::testStruct &_structParameter, CommonAPI::CallStatus &_internalCallStatus, int32_t &_output, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> structInMethodAsync(const HelloWorld::testStruct &_structParameter, StructInMethodAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void structOutMethod(const int32_t &_input, CommonAPI::CallStatus &_internalCallStatus, HelloWorld::testStruct &_structParameter, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> structOutMethodAsync(const int32_t &_input, StructOutMethodAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace commonapi
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_Hello_World_PROXY_BASE_HPP_
