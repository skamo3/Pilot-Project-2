/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p datamanager_interface.h: ../../interfaces/datamanager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DATAMANAGER_INTERFACE_H
#define DATAMANAGER_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface local.DataManager
 */
class LocalDataManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "local.DataManager"; }

public:
    LocalDataManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~LocalDataManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<int> fetchBtrLvFromServer()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("fetchBtrLvFromServer"), argumentList);
    }

    inline QDBusPendingReply<int> fetchHumFromServer()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("fetchHumFromServer"), argumentList);
    }

    inline QDBusPendingReply<int> fetchRpmFromServer()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("fetchRpmFromServer"), argumentList);
    }

    inline QDBusPendingReply<int> fetchTempFromServer()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("fetchTempFromServer"), argumentList);
    }

    inline QDBusPendingReply<> saveCanDataInServer(const QDBusVariant &data)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(data);
        return asyncCallWithArgumentList(QStringLiteral("saveCanDataInServer"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace local {
  typedef ::LocalDataManagerInterface DataManager;
}
#endif
